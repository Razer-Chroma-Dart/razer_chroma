// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to the Razer Chroma macOS library (librazermacos).
class RazerMacOSDriver {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RazerMacOSDriver(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RazerMacOSDriver.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int razer_send_control_msg(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> dev,
    ffi.Pointer<ffi.Void> data,
    int report_index,
  ) {
    return _razer_send_control_msg(
      dev,
      data,
      report_index,
    );
  }

  late final _razer_send_control_msgPtr = _lookup<
      ffi.NativeFunction<
          IOReturn Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Void>, uint)>>('razer_send_control_msg');
  late final _razer_send_control_msg = _razer_send_control_msgPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
          ffi.Pointer<ffi.Void>, int)>();

  int razer_send_control_msg_old_device(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> dev,
    ffi.Pointer<ffi.Void> data,
    int report_value,
    int report_index,
    int report_size,
  ) {
    return _razer_send_control_msg_old_device(
      dev,
      data,
      report_value,
      report_index,
      report_size,
    );
  }

  late final _razer_send_control_msg_old_devicePtr = _lookup<
      ffi.NativeFunction<
          IOReturn Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Void>,
              uint,
              uint,
              uint)>>('razer_send_control_msg_old_device');
  late final _razer_send_control_msg_old_device =
      _razer_send_control_msg_old_devicePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Void>, int, int, int)>();

  int razer_get_usb_response(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> dev,
    int report_index,
    ffi.Pointer<razer_report> request_report,
    int response_index,
    ffi.Pointer<razer_report> response_report,
    int wait_us,
  ) {
    return _razer_get_usb_response(
      dev,
      report_index,
      request_report,
      response_index,
      response_report,
      wait_us,
    );
  }

  late final _razer_get_usb_responsePtr = _lookup<
      ffi.NativeFunction<
          IOReturn Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              uint,
              ffi.Pointer<razer_report>,
              uint,
              ffi.Pointer<razer_report>,
              ffi.Int)>>('razer_get_usb_response');
  late final _razer_get_usb_response = _razer_get_usb_responsePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>, int,
          ffi.Pointer<razer_report>, int, ffi.Pointer<razer_report>, int)>();

  int razer_calculate_crc(
    ffi.Pointer<razer_report> report,
  ) {
    return _razer_calculate_crc(
      report,
    );
  }

  late final _razer_calculate_crcPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              ffi.Pointer<razer_report>)>>('razer_calculate_crc');
  late final _razer_calculate_crc = _razer_calculate_crcPtr
      .asFunction<int Function(ffi.Pointer<razer_report>)>();

  int clamp_u8(
    int value,
    int min,
    int max,
  ) {
    return _clamp_u8(
      value,
      min,
      max,
    );
  }

  late final _clamp_u8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(ffi.UnsignedChar, ffi.UnsignedChar,
              ffi.UnsignedChar)>>('clamp_u8');
  late final _clamp_u8 = _clamp_u8Ptr.asFunction<int Function(int, int, int)>();

  int clamp_u16(
    int value,
    int min,
    int max,
  ) {
    return _clamp_u16(
      value,
      min,
      max,
    );
  }

  late final _clamp_u16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedShort Function(ffi.UnsignedShort, ffi.UnsignedShort,
              ffi.UnsignedShort)>>('clamp_u16');
  late final _clamp_u16 =
      _clamp_u16Ptr.asFunction<int Function(int, int, int)>();

  bool is_blade_laptop(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
  ) {
    return _is_blade_laptop(
      usb_dev,
    );
  }

  late final _is_blade_laptopPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(
                  ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>)>>(
      'is_blade_laptop');
  late final _is_blade_laptop = _is_blade_laptopPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>)>();

  int razer_attr_read_mode_game(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
  ) {
    return _razer_attr_read_mode_game(
      usb_dev,
      buf,
    );
  }

  late final _razer_attr_read_mode_gamePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>)>>('razer_attr_read_mode_game');
  late final _razer_attr_read_mode_game =
      _razer_attr_read_mode_gamePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>)>();

  int razer_attr_write_mode_macro(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_mode_macro(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_mode_macroPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('razer_attr_write_mode_macro');
  late final _razer_attr_write_mode_macro =
      _razer_attr_write_mode_macroPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_mode_macro_effect(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_mode_macro_effect(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_mode_macro_effectPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('razer_attr_write_mode_macro_effect');
  late final _razer_attr_write_mode_macro_effect =
      _razer_attr_write_mode_macro_effectPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_read_mode_get_battery(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
  ) {
    return _razer_attr_read_mode_get_battery(
      usb_dev,
      buf,
    );
  }

  late final _razer_attr_read_mode_get_batteryPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>)>>('razer_attr_read_mode_get_battery');
  late final _razer_attr_read_mode_get_battery =
      _razer_attr_read_mode_get_batteryPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>)>();

  int razer_attr_read_mode_is_charging(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
  ) {
    return _razer_attr_read_mode_is_charging(
      usb_dev,
      buf,
    );
  }

  late final _razer_attr_read_mode_is_chargingPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>)>>('razer_attr_read_mode_is_charging');
  late final _razer_attr_read_mode_is_charging =
      _razer_attr_read_mode_is_chargingPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>)>();

  int razer_attr_read_mode_macro_effect(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
  ) {
    return _razer_attr_read_mode_macro_effect(
      usb_dev,
      buf,
    );
  }

  late final _razer_attr_read_mode_macro_effectPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>)>>('razer_attr_read_mode_macro_effect');
  late final _razer_attr_read_mode_macro_effect =
      _razer_attr_read_mode_macro_effectPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>)>();

  int razer_attr_write_mode_pulsate(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_mode_pulsate(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_mode_pulsatePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('razer_attr_write_mode_pulsate');
  late final _razer_attr_write_mode_pulsate =
      _razer_attr_write_mode_pulsatePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_read_mode_pulsate(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
  ) {
    return _razer_attr_read_mode_pulsate(
      usb_dev,
      buf,
    );
  }

  late final _razer_attr_read_mode_pulsatePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>)>>('razer_attr_read_mode_pulsate');
  late final _razer_attr_read_mode_pulsate =
      _razer_attr_read_mode_pulsatePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>)>();

  int razer_attr_read_tartarus_profile_led_red(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
  ) {
    return _razer_attr_read_tartarus_profile_led_red(
      usb_dev,
      buf,
    );
  }

  late final _razer_attr_read_tartarus_profile_led_redPtr = _lookup<
          ffi.NativeFunction<
              ssize_t Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
                  ffi.Pointer<ffi.Char>)>>(
      'razer_attr_read_tartarus_profile_led_red');
  late final _razer_attr_read_tartarus_profile_led_red =
      _razer_attr_read_tartarus_profile_led_redPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>)>();

  int razer_attr_read_tartarus_profile_led_green(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
  ) {
    return _razer_attr_read_tartarus_profile_led_green(
      usb_dev,
      buf,
    );
  }

  late final _razer_attr_read_tartarus_profile_led_greenPtr = _lookup<
          ffi.NativeFunction<
              ssize_t Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
                  ffi.Pointer<ffi.Char>)>>(
      'razer_attr_read_tartarus_profile_led_green');
  late final _razer_attr_read_tartarus_profile_led_green =
      _razer_attr_read_tartarus_profile_led_greenPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>)>();

  int razer_attr_read_tartarus_profile_led_blue(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
  ) {
    return _razer_attr_read_tartarus_profile_led_blue(
      usb_dev,
      buf,
    );
  }

  late final _razer_attr_read_tartarus_profile_led_bluePtr = _lookup<
          ffi.NativeFunction<
              ssize_t Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
                  ffi.Pointer<ffi.Char>)>>(
      'razer_attr_read_tartarus_profile_led_blue');
  late final _razer_attr_read_tartarus_profile_led_blue =
      _razer_attr_read_tartarus_profile_led_bluePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>)>();

  int razer_attr_read_get_firmware_version(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
  ) {
    return _razer_attr_read_get_firmware_version(
      usb_dev,
      buf,
    );
  }

  late final _razer_attr_read_get_firmware_versionPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>)>>('razer_attr_read_get_firmware_version');
  late final _razer_attr_read_get_firmware_version =
      _razer_attr_read_get_firmware_versionPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>)>();

  int razer_attr_write_mode_none(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_mode_none(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_mode_nonePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('razer_attr_write_mode_none');
  late final _razer_attr_write_mode_none =
      _razer_attr_write_mode_nonePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_mode_wave(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
    int speed,
  ) {
    return _razer_attr_write_mode_wave(
      usb_dev,
      buf,
      count,
      speed,
    );
  }

  late final _razer_attr_write_mode_wavePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int)>>('razer_attr_write_mode_wave');
  late final _razer_attr_write_mode_wave =
      _razer_attr_write_mode_wavePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int, int)>();

  int razer_attr_write_mode_spectrum(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_mode_spectrum(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_mode_spectrumPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('razer_attr_write_mode_spectrum');
  late final _razer_attr_write_mode_spectrum =
      _razer_attr_write_mode_spectrumPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_mode_reactive(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_mode_reactive(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_mode_reactivePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('razer_attr_write_mode_reactive');
  late final _razer_attr_write_mode_reactive =
      _razer_attr_write_mode_reactivePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_mode_static(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_mode_static(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_mode_staticPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('razer_attr_write_mode_static');
  late final _razer_attr_write_mode_static =
      _razer_attr_write_mode_staticPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_mode_static_no_store(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_mode_static_no_store(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_mode_static_no_storePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('razer_attr_write_mode_static_no_store');
  late final _razer_attr_write_mode_static_no_store =
      _razer_attr_write_mode_static_no_storePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_mode_starlight(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_mode_starlight(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_mode_starlightPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('razer_attr_write_mode_starlight');
  late final _razer_attr_write_mode_starlight =
      _razer_attr_write_mode_starlightPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_mode_breath(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_mode_breath(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_mode_breathPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('razer_attr_write_mode_breath');
  late final _razer_attr_write_mode_breath =
      _razer_attr_write_mode_breathPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_read_set_logo(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_read_set_logo(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_read_set_logoPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('razer_attr_read_set_logo');
  late final _razer_attr_read_set_logo =
      _razer_attr_read_set_logoPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_set_logo(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_set_logo(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_set_logoPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('razer_attr_write_set_logo');
  late final _razer_attr_write_set_logo =
      _razer_attr_write_set_logoPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_mode_custom(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_mode_custom(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_mode_customPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('razer_attr_write_mode_custom');
  late final _razer_attr_write_mode_custom =
      _razer_attr_write_mode_customPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_set_fn_toggle(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_set_fn_toggle(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_set_fn_togglePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('razer_attr_write_set_fn_toggle');
  late final _razer_attr_write_set_fn_toggle =
      _razer_attr_write_set_fn_togglePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_set_brightness(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    int brightness,
    int count,
  ) {
    return _razer_attr_write_set_brightness(
      usb_dev,
      brightness,
      count,
    );
  }

  late final _razer_attr_write_set_brightnessPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ushort, ffi.Int)>>('razer_attr_write_set_brightness');
  late final _razer_attr_write_set_brightness =
      _razer_attr_write_set_brightnessPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>, int, int)>();

  int razer_attr_read_set_brightness(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
  ) {
    return _razer_attr_read_set_brightness(
      usb_dev,
    );
  }

  late final _razer_attr_read_set_brightnessPtr = _lookup<
          ffi.NativeFunction<
              ushort Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>)>>(
      'razer_attr_read_set_brightness');
  late final _razer_attr_read_set_brightness =
      _razer_attr_read_set_brightnessPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>)>();

  int razer_attr_write_matrix_custom_frame(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_matrix_custom_frame(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_matrix_custom_framePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('razer_attr_write_matrix_custom_frame');
  late final _razer_attr_write_matrix_custom_frame =
      _razer_attr_write_matrix_custom_framePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_logo_mode_wave(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_logo_mode_wave(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_logo_mode_wavePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_attr_write_logo_mode_wave');
  late final _razer_attr_write_logo_mode_wave =
      _razer_attr_write_logo_mode_wavePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_scroll_mode_wave(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_scroll_mode_wave(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_scroll_mode_wavePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_attr_write_scroll_mode_wave');
  late final _razer_attr_write_scroll_mode_wave =
      _razer_attr_write_scroll_mode_wavePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_left_mode_wave(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_left_mode_wave(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_left_mode_wavePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_attr_write_left_mode_wave');
  late final _razer_attr_write_left_mode_wave =
      _razer_attr_write_left_mode_wavePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_right_mode_wave(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_right_mode_wave(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_right_mode_wavePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_attr_write_right_mode_wave');
  late final _razer_attr_write_right_mode_wave =
      _razer_attr_write_right_mode_wavePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_logo_mode_static(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_logo_mode_static(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_logo_mode_staticPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_attr_write_logo_mode_static');
  late final _razer_attr_write_logo_mode_static =
      _razer_attr_write_logo_mode_staticPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_scroll_mode_static(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_scroll_mode_static(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_scroll_mode_staticPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_attr_write_scroll_mode_static');
  late final _razer_attr_write_scroll_mode_static =
      _razer_attr_write_scroll_mode_staticPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_left_mode_static(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_left_mode_static(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_left_mode_staticPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_attr_write_left_mode_static');
  late final _razer_attr_write_left_mode_static =
      _razer_attr_write_left_mode_staticPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_right_mode_static(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_right_mode_static(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_right_mode_staticPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_attr_write_right_mode_static');
  late final _razer_attr_write_right_mode_static =
      _razer_attr_write_right_mode_staticPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_logo_mode_static_no_store(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_logo_mode_static_no_store(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_logo_mode_static_no_storePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_attr_write_logo_mode_static_no_store');
  late final _razer_attr_write_logo_mode_static_no_store =
      _razer_attr_write_logo_mode_static_no_storePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_scroll_mode_static_no_store(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_scroll_mode_static_no_store(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_scroll_mode_static_no_storePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_attr_write_scroll_mode_static_no_store');
  late final _razer_attr_write_scroll_mode_static_no_store =
      _razer_attr_write_scroll_mode_static_no_storePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_left_mode_static_no_store(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_left_mode_static_no_store(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_left_mode_static_no_storePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_attr_write_left_mode_static_no_store');
  late final _razer_attr_write_left_mode_static_no_store =
      _razer_attr_write_left_mode_static_no_storePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_right_mode_static_no_store(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_right_mode_static_no_store(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_right_mode_static_no_storePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_attr_write_right_mode_static_no_store');
  late final _razer_attr_write_right_mode_static_no_store =
      _razer_attr_write_right_mode_static_no_storePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_logo_mode_spectrum(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_logo_mode_spectrum(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_logo_mode_spectrumPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_attr_write_logo_mode_spectrum');
  late final _razer_attr_write_logo_mode_spectrum =
      _razer_attr_write_logo_mode_spectrumPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_scroll_mode_spectrum(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_scroll_mode_spectrum(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_scroll_mode_spectrumPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_attr_write_scroll_mode_spectrum');
  late final _razer_attr_write_scroll_mode_spectrum =
      _razer_attr_write_scroll_mode_spectrumPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_left_mode_spectrum(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_left_mode_spectrum(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_left_mode_spectrumPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_attr_write_left_mode_spectrum');
  late final _razer_attr_write_left_mode_spectrum =
      _razer_attr_write_left_mode_spectrumPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_right_mode_spectrum(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_right_mode_spectrum(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_right_mode_spectrumPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_attr_write_right_mode_spectrum');
  late final _razer_attr_write_right_mode_spectrum =
      _razer_attr_write_right_mode_spectrumPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_logo_mode_breath(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_logo_mode_breath(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_logo_mode_breathPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_attr_write_logo_mode_breath');
  late final _razer_attr_write_logo_mode_breath =
      _razer_attr_write_logo_mode_breathPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_scroll_mode_breath(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_scroll_mode_breath(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_scroll_mode_breathPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_attr_write_scroll_mode_breath');
  late final _razer_attr_write_scroll_mode_breath =
      _razer_attr_write_scroll_mode_breathPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_left_mode_breath(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_left_mode_breath(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_left_mode_breathPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_attr_write_left_mode_breath');
  late final _razer_attr_write_left_mode_breath =
      _razer_attr_write_left_mode_breathPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_right_mode_breath(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_right_mode_breath(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_right_mode_breathPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_attr_write_right_mode_breath');
  late final _razer_attr_write_right_mode_breath =
      _razer_attr_write_right_mode_breathPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_logo_mode_none(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_logo_mode_none(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_logo_mode_nonePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_attr_write_logo_mode_none');
  late final _razer_attr_write_logo_mode_none =
      _razer_attr_write_logo_mode_nonePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_scroll_mode_none(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_scroll_mode_none(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_scroll_mode_nonePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_attr_write_scroll_mode_none');
  late final _razer_attr_write_scroll_mode_none =
      _razer_attr_write_scroll_mode_nonePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_left_mode_none(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_left_mode_none(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_left_mode_nonePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_attr_write_left_mode_none');
  late final _razer_attr_write_left_mode_none =
      _razer_attr_write_left_mode_nonePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_right_mode_none(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_right_mode_none(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_right_mode_nonePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_attr_write_right_mode_none');
  late final _razer_attr_write_right_mode_none =
      _razer_attr_write_right_mode_nonePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_logo_mode_reactive(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_logo_mode_reactive(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_logo_mode_reactivePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_attr_write_logo_mode_reactive');
  late final _razer_attr_write_logo_mode_reactive =
      _razer_attr_write_logo_mode_reactivePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_scroll_mode_reactive(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_scroll_mode_reactive(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_scroll_mode_reactivePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_attr_write_scroll_mode_reactive');
  late final _razer_attr_write_scroll_mode_reactive =
      _razer_attr_write_scroll_mode_reactivePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_side_mode_reactive(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
    int side,
  ) {
    return _razer_attr_write_side_mode_reactive(
      usb_dev,
      buf,
      count,
      side,
    );
  }

  late final _razer_attr_write_side_mode_reactivePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Int)>>('razer_attr_write_side_mode_reactive');
  late final _razer_attr_write_side_mode_reactive =
      _razer_attr_write_side_mode_reactivePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int, int)>();

  int razer_attr_write_left_mode_reactive(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_left_mode_reactive(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_left_mode_reactivePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_attr_write_left_mode_reactive');
  late final _razer_attr_write_left_mode_reactive =
      _razer_attr_write_left_mode_reactivePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_right_mode_reactive(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_right_mode_reactive(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_right_mode_reactivePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_attr_write_right_mode_reactive');
  late final _razer_attr_write_right_mode_reactive =
      _razer_attr_write_right_mode_reactivePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_read_dpi(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
  ) {
    return _razer_attr_read_dpi(
      usb_dev,
    );
  }

  late final _razer_attr_read_dpiPtr = _lookup<
          ffi.NativeFunction<
              ushort Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>)>>(
      'razer_attr_read_dpi');
  late final _razer_attr_read_dpi = _razer_attr_read_dpiPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>)>();

  void razer_attr_write_dpi(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    int dpi_x,
    int dpi_y,
  ) {
    return _razer_attr_write_dpi(
      usb_dev,
      dpi_x,
      dpi_y,
    );
  }

  late final _razer_attr_write_dpiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ushort, ushort)>>('razer_attr_write_dpi');
  late final _razer_attr_write_dpi = _razer_attr_write_dpiPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>, int, int)>();

  int razer_attr_read_poll_rate(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
  ) {
    return _razer_attr_read_poll_rate(
      usb_dev,
    );
  }

  late final _razer_attr_read_poll_ratePtr = _lookup<
          ffi.NativeFunction<
              ushort Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>)>>(
      'razer_attr_read_poll_rate');
  late final _razer_attr_read_poll_rate =
      _razer_attr_read_poll_ratePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>)>();

  void razer_attr_write_poll_rate(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    int polling_rate,
  ) {
    return _razer_attr_write_poll_rate(
      usb_dev,
      polling_rate,
    );
  }

  late final _razer_attr_write_poll_ratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ushort)>>('razer_attr_write_poll_rate');
  late final _razer_attr_write_poll_rate =
      _razer_attr_write_poll_ratePtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>, int)>();

  int razer_attr_read_matrix_brightness(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
  ) {
    return _razer_attr_read_matrix_brightness(
      usb_dev,
    );
  }

  late final _razer_attr_read_matrix_brightnessPtr = _lookup<
          ffi.NativeFunction<
              ushort Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>)>>(
      'razer_attr_read_matrix_brightness');
  late final _razer_attr_read_matrix_brightness =
      _razer_attr_read_matrix_brightnessPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>)>();

  void razer_attr_write_matrix_brightness(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    int brightness,
  ) {
    return _razer_attr_write_matrix_brightness(
      usb_dev,
      brightness,
    );
  }

  late final _razer_attr_write_matrix_brightnessPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.UnsignedChar)>>('razer_attr_write_matrix_brightness');
  late final _razer_attr_write_matrix_brightness =
      _razer_attr_write_matrix_brightnessPtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>, int)>();

  int razer_attr_read_scroll_led_brightness(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
  ) {
    return _razer_attr_read_scroll_led_brightness(
      usb_dev,
    );
  }

  late final _razer_attr_read_scroll_led_brightnessPtr = _lookup<
          ffi.NativeFunction<
              ushort Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>)>>(
      'razer_attr_read_scroll_led_brightness');
  late final _razer_attr_read_scroll_led_brightness =
      _razer_attr_read_scroll_led_brightnessPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>)>();

  void razer_attr_write_scroll_led_brightness(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    int brightness,
  ) {
    return _razer_attr_write_scroll_led_brightness(
      usb_dev,
      brightness,
    );
  }

  late final _razer_attr_write_scroll_led_brightnessPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.UnsignedChar)>>('razer_attr_write_scroll_led_brightness');
  late final _razer_attr_write_scroll_led_brightness =
      _razer_attr_write_scroll_led_brightnessPtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>, int)>();

  int razer_attr_read_logo_led_brightness(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
  ) {
    return _razer_attr_read_logo_led_brightness(
      usb_dev,
    );
  }

  late final _razer_attr_read_logo_led_brightnessPtr = _lookup<
          ffi.NativeFunction<
              ushort Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>)>>(
      'razer_attr_read_logo_led_brightness');
  late final _razer_attr_read_logo_led_brightness =
      _razer_attr_read_logo_led_brightnessPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>)>();

  void razer_attr_write_logo_led_brightness(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    int brightness,
  ) {
    return _razer_attr_write_logo_led_brightness(
      usb_dev,
      brightness,
    );
  }

  late final _razer_attr_write_logo_led_brightnessPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.UnsignedChar)>>('razer_attr_write_logo_led_brightness');
  late final _razer_attr_write_logo_led_brightness =
      _razer_attr_write_logo_led_brightnessPtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>, int)>();

  int razer_attr_read_left_led_brightness(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
  ) {
    return _razer_attr_read_left_led_brightness(
      usb_dev,
    );
  }

  late final _razer_attr_read_left_led_brightnessPtr = _lookup<
          ffi.NativeFunction<
              ushort Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>)>>(
      'razer_attr_read_left_led_brightness');
  late final _razer_attr_read_left_led_brightness =
      _razer_attr_read_left_led_brightnessPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>)>();

  void razer_attr_write_left_led_brightness(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    int brightness,
  ) {
    return _razer_attr_write_left_led_brightness(
      usb_dev,
      brightness,
    );
  }

  late final _razer_attr_write_left_led_brightnessPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.UnsignedChar)>>('razer_attr_write_left_led_brightness');
  late final _razer_attr_write_left_led_brightness =
      _razer_attr_write_left_led_brightnessPtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>, int)>();

  int razer_attr_read_right_led_brightness(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
  ) {
    return _razer_attr_read_right_led_brightness(
      usb_dev,
    );
  }

  late final _razer_attr_read_right_led_brightnessPtr = _lookup<
          ffi.NativeFunction<
              ushort Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>)>>(
      'razer_attr_read_right_led_brightness');
  late final _razer_attr_read_right_led_brightness =
      _razer_attr_read_right_led_brightnessPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>)>();

  void razer_attr_write_right_led_brightness(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    int brightness,
  ) {
    return _razer_attr_write_right_led_brightness(
      usb_dev,
      brightness,
    );
  }

  late final _razer_attr_write_right_led_brightnessPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.UnsignedChar)>>('razer_attr_write_right_led_brightness');
  late final _razer_attr_write_right_led_brightness =
      _razer_attr_write_right_led_brightnessPtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>, int)>();

  int razer_attr_write_logo_led_effect(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_logo_led_effect(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_logo_led_effectPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_attr_write_logo_led_effect');
  late final _razer_attr_write_logo_led_effect =
      _razer_attr_write_logo_led_effectPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_scroll_led_effect(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_scroll_led_effect(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_scroll_led_effectPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_attr_write_scroll_led_effect');
  late final _razer_attr_write_scroll_led_effect =
      _razer_attr_write_scroll_led_effectPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_write_logo_led_rgb(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_attr_write_logo_led_rgb(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_attr_write_logo_led_rgbPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_attr_write_logo_led_rgb');
  late final _razer_attr_write_logo_led_rgb =
      _razer_attr_write_logo_led_rgbPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_attr_read_get_battery(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
  ) {
    return _razer_attr_read_get_battery(
      usb_dev,
      buf,
    );
  }

  late final _razer_attr_read_get_batteryPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>)>>('razer_attr_read_get_battery');
  late final _razer_attr_read_get_battery =
      _razer_attr_read_get_batteryPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>)>();

  int razer_attr_read_is_charging(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
  ) {
    return _razer_attr_read_is_charging(
      usb_dev,
      buf,
    );
  }

  late final _razer_attr_read_is_chargingPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>)>>('razer_attr_read_is_charging');
  late final _razer_attr_read_is_charging =
      _razer_attr_read_is_chargingPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>)>();

  int razer_mouse_dock_attr_write_mode_static(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_mouse_dock_attr_write_mode_static(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_mouse_dock_attr_write_mode_staticPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_mouse_dock_attr_write_mode_static');
  late final _razer_mouse_dock_attr_write_mode_static =
      _razer_mouse_dock_attr_write_mode_staticPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_mouse_dock_attr_write_mode_static_no_store(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_mouse_dock_attr_write_mode_static_no_store(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_mouse_dock_attr_write_mode_static_no_storePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_mouse_dock_attr_write_mode_static_no_store');
  late final _razer_mouse_dock_attr_write_mode_static_no_store =
      _razer_mouse_dock_attr_write_mode_static_no_storePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_mouse_dock_attr_write_mode_spectrum(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_mouse_dock_attr_write_mode_spectrum(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_mouse_dock_attr_write_mode_spectrumPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_mouse_dock_attr_write_mode_spectrum');
  late final _razer_mouse_dock_attr_write_mode_spectrum =
      _razer_mouse_dock_attr_write_mode_spectrumPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_mouse_dock_attr_write_mode_breath(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_mouse_dock_attr_write_mode_breath(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_mouse_dock_attr_write_mode_breathPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_mouse_dock_attr_write_mode_breath');
  late final _razer_mouse_dock_attr_write_mode_breath =
      _razer_mouse_dock_attr_write_mode_breathPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_mouse_dock_attr_write_mode_none(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_mouse_dock_attr_write_mode_none(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_mouse_dock_attr_write_mode_nonePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_mouse_dock_attr_write_mode_none');
  late final _razer_mouse_dock_attr_write_mode_none =
      _razer_mouse_dock_attr_write_mode_nonePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_mouse_mat_attr_write_mode_none(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_mouse_mat_attr_write_mode_none(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_mouse_mat_attr_write_mode_nonePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_mouse_mat_attr_write_mode_none');
  late final _razer_mouse_mat_attr_write_mode_none =
      _razer_mouse_mat_attr_write_mode_nonePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_mouse_mat_attr_write_mode_wave(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_mouse_mat_attr_write_mode_wave(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_mouse_mat_attr_write_mode_wavePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_mouse_mat_attr_write_mode_wave');
  late final _razer_mouse_mat_attr_write_mode_wave =
      _razer_mouse_mat_attr_write_mode_wavePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_mouse_mat_attr_write_mode_breath(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_mouse_mat_attr_write_mode_breath(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_mouse_mat_attr_write_mode_breathPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_mouse_mat_attr_write_mode_breath');
  late final _razer_mouse_mat_attr_write_mode_breath =
      _razer_mouse_mat_attr_write_mode_breathPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_mouse_mat_attr_write_mode_static(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_mouse_mat_attr_write_mode_static(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_mouse_mat_attr_write_mode_staticPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_mouse_mat_attr_write_mode_static');
  late final _razer_mouse_mat_attr_write_mode_static =
      _razer_mouse_mat_attr_write_mode_staticPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_mouse_mat_attr_write_mode_static_no_store(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_mouse_mat_attr_write_mode_static_no_store(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_mouse_mat_attr_write_mode_static_no_storePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_mouse_mat_attr_write_mode_static_no_store');
  late final _razer_mouse_mat_attr_write_mode_static_no_store =
      _razer_mouse_mat_attr_write_mode_static_no_storePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_mouse_mat_attr_write_mode_spectrum(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_mouse_mat_attr_write_mode_spectrum(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_mouse_mat_attr_write_mode_spectrumPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_mouse_mat_attr_write_mode_spectrum');
  late final _razer_mouse_mat_attr_write_mode_spectrum =
      _razer_mouse_mat_attr_write_mode_spectrumPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_mouse_mat_attr_write_set_brightness(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    int brightness,
    int count,
  ) {
    return _razer_mouse_mat_attr_write_set_brightness(
      usb_dev,
      brightness,
      count,
    );
  }

  late final _razer_mouse_mat_attr_write_set_brightnessPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ushort, ffi.Size)>>('razer_mouse_mat_attr_write_set_brightness');
  late final _razer_mouse_mat_attr_write_set_brightness =
      _razer_mouse_mat_attr_write_set_brightnessPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>, int, int)>();

  int razer_mouse_mat_attr_read_set_brightness(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
  ) {
    return _razer_mouse_mat_attr_read_set_brightness(
      usb_dev,
    );
  }

  late final _razer_mouse_mat_attr_read_set_brightnessPtr = _lookup<
          ffi.NativeFunction<
              ushort Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>)>>(
      'razer_mouse_mat_attr_read_set_brightness');
  late final _razer_mouse_mat_attr_read_set_brightness =
      _razer_mouse_mat_attr_read_set_brightnessPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>)>();

  int razer_headphone_attr_write_mode_none(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_headphone_attr_write_mode_none(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_headphone_attr_write_mode_nonePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_headphone_attr_write_mode_none');
  late final _razer_headphone_attr_write_mode_none =
      _razer_headphone_attr_write_mode_nonePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_headphone_attr_write_mode_breath(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_headphone_attr_write_mode_breath(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_headphone_attr_write_mode_breathPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_headphone_attr_write_mode_breath');
  late final _razer_headphone_attr_write_mode_breath =
      _razer_headphone_attr_write_mode_breathPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_headphone_attr_write_mode_static(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_headphone_attr_write_mode_static(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_headphone_attr_write_mode_staticPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_headphone_attr_write_mode_static');
  late final _razer_headphone_attr_write_mode_static =
      _razer_headphone_attr_write_mode_staticPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_headphone_attr_write_mode_static_no_store(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_headphone_attr_write_mode_static_no_store(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_headphone_attr_write_mode_static_no_storePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_headphone_attr_write_mode_static_no_store');
  late final _razer_headphone_attr_write_mode_static_no_store =
      _razer_headphone_attr_write_mode_static_no_storePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_headphone_attr_write_mode_spectrum(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_headphone_attr_write_mode_spectrum(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_headphone_attr_write_mode_spectrumPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_headphone_attr_write_mode_spectrum');
  late final _razer_headphone_attr_write_mode_spectrum =
      _razer_headphone_attr_write_mode_spectrumPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_headphone_attr_write_mode_wave(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
    int speed,
  ) {
    return _razer_headphone_attr_write_mode_wave(
      usb_dev,
      buf,
      count,
      speed,
    );
  }

  late final _razer_headphone_attr_write_mode_wavePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Int)>>('razer_headphone_attr_write_mode_wave');
  late final _razer_headphone_attr_write_mode_wave =
      _razer_headphone_attr_write_mode_wavePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int, int)>();

  int razer_headphone_attr_write_mode_starlight(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_headphone_attr_write_mode_starlight(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_headphone_attr_write_mode_starlightPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_headphone_attr_write_mode_starlight');
  late final _razer_headphone_attr_write_mode_starlight =
      _razer_headphone_attr_write_mode_starlightPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_egpu_attr_write_mode_none(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_egpu_attr_write_mode_none(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_egpu_attr_write_mode_nonePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_egpu_attr_write_mode_none');
  late final _razer_egpu_attr_write_mode_none =
      _razer_egpu_attr_write_mode_nonePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_egpu_attr_write_mode_wave(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_egpu_attr_write_mode_wave(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_egpu_attr_write_mode_wavePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_egpu_attr_write_mode_wave');
  late final _razer_egpu_attr_write_mode_wave =
      _razer_egpu_attr_write_mode_wavePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_egpu_attr_write_mode_breath(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_egpu_attr_write_mode_breath(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_egpu_attr_write_mode_breathPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_egpu_attr_write_mode_breath');
  late final _razer_egpu_attr_write_mode_breath =
      _razer_egpu_attr_write_mode_breathPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_egpu_attr_write_mode_static(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_egpu_attr_write_mode_static(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_egpu_attr_write_mode_staticPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_egpu_attr_write_mode_static');
  late final _razer_egpu_attr_write_mode_static =
      _razer_egpu_attr_write_mode_staticPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_egpu_attr_write_mode_static_no_store(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_egpu_attr_write_mode_static_no_store(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_egpu_attr_write_mode_static_no_storePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_egpu_attr_write_mode_static_no_store');
  late final _razer_egpu_attr_write_mode_static_no_store =
      _razer_egpu_attr_write_mode_static_no_storePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_egpu_attr_write_mode_spectrum(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_egpu_attr_write_mode_spectrum(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_egpu_attr_write_mode_spectrumPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_egpu_attr_write_mode_spectrum');
  late final _razer_egpu_attr_write_mode_spectrum =
      _razer_egpu_attr_write_mode_spectrumPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_kraken_attr_write_mode_none(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_kraken_attr_write_mode_none(
      dev,
      buf,
      count,
    );
  }

  late final _razer_kraken_attr_write_mode_nonePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_kraken_attr_write_mode_none');
  late final _razer_kraken_attr_write_mode_none =
      _razer_kraken_attr_write_mode_nonePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_kraken_attr_write_mode_static(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_kraken_attr_write_mode_static(
      dev,
      buf,
      count,
    );
  }

  late final _razer_kraken_attr_write_mode_staticPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_kraken_attr_write_mode_static');
  late final _razer_kraken_attr_write_mode_static =
      _razer_kraken_attr_write_mode_staticPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_kraken_attr_write_mode_custom(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_kraken_attr_write_mode_custom(
      dev,
      buf,
      count,
    );
  }

  late final _razer_kraken_attr_write_mode_customPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_kraken_attr_write_mode_custom');
  late final _razer_kraken_attr_write_mode_custom =
      _razer_kraken_attr_write_mode_customPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_kraken_attr_write_mode_breath(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_kraken_attr_write_mode_breath(
      dev,
      buf,
      count,
    );
  }

  late final _razer_kraken_attr_write_mode_breathPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_kraken_attr_write_mode_breath');
  late final _razer_kraken_attr_write_mode_breath =
      _razer_kraken_attr_write_mode_breathPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_kraken_attr_write_mode_spectrum(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_kraken_attr_write_mode_spectrum(
      dev,
      buf,
      count,
    );
  }

  late final _razer_kraken_attr_write_mode_spectrumPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_kraken_attr_write_mode_spectrum');
  late final _razer_kraken_attr_write_mode_spectrum =
      _razer_kraken_attr_write_mode_spectrumPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_accessory_attr_write_mode_none(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_accessory_attr_write_mode_none(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_accessory_attr_write_mode_nonePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_accessory_attr_write_mode_none');
  late final _razer_accessory_attr_write_mode_none =
      _razer_accessory_attr_write_mode_nonePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_accessory_attr_write_mode_spectrum(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_accessory_attr_write_mode_spectrum(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_accessory_attr_write_mode_spectrumPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_accessory_attr_write_mode_spectrum');
  late final _razer_accessory_attr_write_mode_spectrum =
      _razer_accessory_attr_write_mode_spectrumPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_accessory_attr_write_mode_wave(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
    int speed,
  ) {
    return _razer_accessory_attr_write_mode_wave(
      usb_dev,
      buf,
      count,
      speed,
    );
  }

  late final _razer_accessory_attr_write_mode_wavePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Int)>>('razer_accessory_attr_write_mode_wave');
  late final _razer_accessory_attr_write_mode_wave =
      _razer_accessory_attr_write_mode_wavePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int, int)>();

  int razer_accessory_attr_write_mode_static(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_accessory_attr_write_mode_static(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_accessory_attr_write_mode_staticPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_accessory_attr_write_mode_static');
  late final _razer_accessory_attr_write_mode_static =
      _razer_accessory_attr_write_mode_staticPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_accessory_attr_write_mode_breath(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    ffi.Pointer<ffi.Char> buf,
    int count,
  ) {
    return _razer_accessory_attr_write_mode_breath(
      usb_dev,
      buf,
      count,
    );
  }

  late final _razer_accessory_attr_write_mode_breathPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('razer_accessory_attr_write_mode_breath');
  late final _razer_accessory_attr_write_mode_breath =
      _razer_accessory_attr_write_mode_breathPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ffi.Pointer<ffi.Char>, int)>();

  int razer_accessory_attr_read_set_brightness(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
  ) {
    return _razer_accessory_attr_read_set_brightness(
      usb_dev,
    );
  }

  late final _razer_accessory_attr_read_set_brightnessPtr = _lookup<
          ffi.NativeFunction<
              ushort Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>)>>(
      'razer_accessory_attr_read_set_brightness');
  late final _razer_accessory_attr_read_set_brightness =
      _razer_accessory_attr_read_set_brightnessPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>)>();

  int razer_accessory_attr_write_set_brightness(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usb_dev,
    int brightness,
    int count,
  ) {
    return _razer_accessory_attr_write_set_brightness(
      usb_dev,
      brightness,
      count,
    );
  }

  late final _razer_accessory_attr_write_set_brightnessPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>,
              ushort, ffi.Size)>>('razer_accessory_attr_write_set_brightness');
  late final _razer_accessory_attr_write_set_brightness =
      _razer_accessory_attr_write_set_brightnessPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>, int, int)>();

  ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> getRazerUSBDeviceInterface(
    int type,
  ) {
    return _getRazerUSBDeviceInterface(
      type,
    );
  }

  late final _getRazerUSBDeviceInterfacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> Function(
              ffi.Int)>>('getRazerUSBDeviceInterface');
  late final _getRazerUSBDeviceInterface =
      _getRazerUSBDeviceInterfacePtr.asFunction<
          ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> Function(int)>();

  void closeRazerUSBDeviceInterface(
    ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> dev,
  ) {
    return _closeRazerUSBDeviceInterface(
      dev,
    );
  }

  late final _closeRazerUSBDeviceInterfacePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>)>>(
      'closeRazerUSBDeviceInterface');
  late final _closeRazerUSBDeviceInterface =
      _closeRazerUSBDeviceInterfacePtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>>)>();

  RazerDevices getAllRazerDevices() {
    return _getAllRazerDevices();
  }

  late final _getAllRazerDevicesPtr =
      _lookup<ffi.NativeFunction<RazerDevices Function()>>(
          'getAllRazerDevices');
  late final _getAllRazerDevices =
      _getAllRazerDevicesPtr.asFunction<RazerDevices Function()>();

  void closeAllRazerDevices(
    RazerDevices devices,
  ) {
    return _closeAllRazerDevices(
      devices,
    );
  }

  late final _closeAllRazerDevicesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RazerDevices)>>(
          'closeAllRazerDevices');
  late final _closeAllRazerDevices =
      _closeAllRazerDevicesPtr.asFunction<void Function(RazerDevices)>();
}

class razer_rgb extends ffi.Struct {
  @ffi.UnsignedChar()
  external int r;

  @ffi.UnsignedChar()
  external int g;

  @ffi.UnsignedChar()
  external int b;
}

class transaction_id_union extends ffi.Opaque {}

class command_id_union extends ffi.Opaque {}

class razer_report extends ffi.Opaque {}

typedef IOReturn = kern_return_t;
typedef kern_return_t = ffi.Int;
typedef IOUSBDeviceInterface = IOUSBDeviceInterface942;
typedef IOUSBDeviceInterface942 = IOUSBDeviceStruct942;

class IOUSBDeviceStruct942 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _reserved;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<ffi.Void>, REFIID, ffi.Pointer<LPVOID>)>>
      QueryInterface;

  external ffi
          .Pointer<ffi.NativeFunction<ULONG Function(ffi.Pointer<ffi.Void>)>>
      AddRef;

  external ffi
          .Pointer<ffi.NativeFunction<ULONG Function(ffi.Pointer<ffi.Void>)>>
      Release;

  external ffi.Pointer<
          ffi.NativeFunction<
              IOReturn Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<CFRunLoopSourceRef>)>>
      CreateDeviceAsyncEventSource;

  external ffi.Pointer<
          ffi.NativeFunction<
              CFRunLoopSourceRef Function(ffi.Pointer<ffi.Void>)>>
      GetDeviceAsyncEventSource;

  external ffi.Pointer<
          ffi.NativeFunction<
              IOReturn Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<mach_port_t>)>>
      CreateDeviceAsyncPort;

  external ffi.Pointer<
          ffi.NativeFunction<mach_port_t Function(ffi.Pointer<ffi.Void>)>>
      GetDeviceAsyncPort;

  external ffi
          .Pointer<ffi.NativeFunction<IOReturn Function(ffi.Pointer<ffi.Void>)>>
      USBDeviceOpen;

  external ffi
          .Pointer<ffi.NativeFunction<IOReturn Function(ffi.Pointer<ffi.Void>)>>
      USBDeviceClose;

  external ffi.Pointer<
          ffi.NativeFunction<
              IOReturn Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UInt8>)>>
      GetDeviceClass;

  external ffi.Pointer<
          ffi.NativeFunction<
              IOReturn Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UInt8>)>>
      GetDeviceSubClass;

  external ffi.Pointer<
          ffi.NativeFunction<
              IOReturn Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UInt8>)>>
      GetDeviceProtocol;

  external ffi.Pointer<
          ffi.NativeFunction<
              IOReturn Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UInt16>)>>
      GetDeviceVendor;

  external ffi.Pointer<
          ffi.NativeFunction<
              IOReturn Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UInt16>)>>
      GetDeviceProduct;

  external ffi.Pointer<
          ffi.NativeFunction<
              IOReturn Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UInt16>)>>
      GetDeviceReleaseNumber;

  external ffi.Pointer<
          ffi.NativeFunction<
              IOReturn Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<USBDeviceAddress>)>>
      GetDeviceAddress;

  external ffi.Pointer<
          ffi.NativeFunction<
              IOReturn Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UInt32>)>>
      GetDeviceBusPowerAvailable;

  external ffi.Pointer<
          ffi.NativeFunction<
              IOReturn Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UInt8>)>>
      GetDeviceSpeed;

  external ffi.Pointer<
          ffi.NativeFunction<
              IOReturn Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UInt8>)>>
      GetNumberOfConfigurations;

  external ffi.Pointer<
          ffi.NativeFunction<
              IOReturn Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UInt32>)>>
      GetLocationID;

  external ffi.Pointer<
          ffi.NativeFunction<
              IOReturn Function(ffi.Pointer<ffi.Void>, UInt8,
                  ffi.Pointer<IOUSBConfigurationDescriptorPtr>)>>
      GetConfigurationDescriptorPtr;

  external ffi.Pointer<
          ffi.NativeFunction<
              IOReturn Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UInt8>)>>
      GetConfiguration;

  external ffi.Pointer<
          ffi.NativeFunction<IOReturn Function(ffi.Pointer<ffi.Void>, UInt8)>>
      SetConfiguration;

  external ffi.Pointer<
      ffi.NativeFunction<
          IOReturn Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UInt64>,
              ffi.Pointer<AbsoluteTime>)>> GetBusFrameNumber;

  external ffi
          .Pointer<ffi.NativeFunction<IOReturn Function(ffi.Pointer<ffi.Void>)>>
      ResetDevice;

  external ffi.Pointer<
          ffi.NativeFunction<
              IOReturn Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<IOUSBDevRequest>)>>
      DeviceRequest;

  external ffi.Pointer<
      ffi.NativeFunction<
          IOReturn Function(ffi.Pointer<ffi.Void>, ffi.Pointer<IOUSBDevRequest>,
              IOAsyncCallback1, ffi.Pointer<ffi.Void>)>> DeviceRequestAsync;

  external ffi.Pointer<
      ffi.NativeFunction<
          IOReturn Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<IOUSBFindInterfaceRequest>,
              ffi.Pointer<io_iterator_t>)>> CreateInterfaceIterator;

  external ffi
          .Pointer<ffi.NativeFunction<IOReturn Function(ffi.Pointer<ffi.Void>)>>
      USBDeviceOpenSeize;

  external ffi.Pointer<
          ffi.NativeFunction<
              IOReturn Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<IOUSBDevRequestTO>)>>
      DeviceRequestTO;

  external ffi.Pointer<
      ffi.NativeFunction<
          IOReturn Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<IOUSBDevRequestTO>,
              IOAsyncCallback1,
              ffi.Pointer<ffi.Void>)>> DeviceRequestAsyncTO;

  external ffi.Pointer<
          ffi.NativeFunction<IOReturn Function(ffi.Pointer<ffi.Void>, Boolean)>>
      USBDeviceSuspend;

  external ffi
          .Pointer<ffi.NativeFunction<IOReturn Function(ffi.Pointer<ffi.Void>)>>
      USBDeviceAbortPipeZero;

  external ffi.Pointer<
          ffi.NativeFunction<
              IOReturn Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UInt8>)>>
      USBGetManufacturerStringIndex;

  external ffi.Pointer<
          ffi.NativeFunction<
              IOReturn Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UInt8>)>>
      USBGetProductStringIndex;

  external ffi.Pointer<
          ffi.NativeFunction<
              IOReturn Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UInt8>)>>
      USBGetSerialNumberStringIndex;

  external ffi.Pointer<
          ffi.NativeFunction<IOReturn Function(ffi.Pointer<ffi.Void>, UInt32)>>
      USBDeviceReEnumerate;

  external ffi.Pointer<
      ffi.NativeFunction<
          IOReturn Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UInt64>,
              ffi.Pointer<AbsoluteTime>)>> GetBusMicroFrameNumber;

  external ffi.Pointer<
      ffi.NativeFunction<
          IOReturn Function(ffi.Pointer<ffi.Void>, ffi.Pointer<NumVersion>,
              ffi.Pointer<NumVersion>)>> GetIOUSBLibVersion;

  external ffi.Pointer<
      ffi.NativeFunction<
          IOReturn Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UInt64>,
              ffi.Pointer<AbsoluteTime>)>> GetBusFrameNumberWithTime;

  external ffi.Pointer<
          ffi.NativeFunction<
              IOReturn Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UInt32>)>>
      GetUSBDeviceInformation;

  external ffi.Pointer<
          ffi.NativeFunction<
              IOReturn Function(
                  ffi.Pointer<ffi.Void>, UInt32, UInt32, ffi.Pointer<UInt32>)>>
      RequestExtraPower;

  external ffi.Pointer<
          ffi.NativeFunction<
              IOReturn Function(ffi.Pointer<ffi.Void>, UInt32, UInt32)>>
      ReturnExtraPower;

  external ffi.Pointer<
          ffi.NativeFunction<
              IOReturn Function(
                  ffi.Pointer<ffi.Void>, UInt32, ffi.Pointer<UInt32>)>>
      GetExtraPowerAllocated;

  external ffi.Pointer<
          ffi.NativeFunction<
              IOReturn Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UInt32>)>>
      GetBandwidthAvailableForDevice;

  external ffi.Pointer<
          ffi.NativeFunction<
              IOReturn Function(
                  ffi.Pointer<ffi.Void>, UInt8, ffi.Bool, ffi.Bool)>>
      SetConfigurationV2;

  external ffi.Pointer<
      ffi.NativeFunction<
          IOReturn Function(
              ffi.Pointer<ffi.Void>,
              UInt64,
              IOAsyncCallback2,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UInt64>)>> RegisterForNotification;

  external ffi.Pointer<
          ffi.NativeFunction<IOReturn Function(ffi.Pointer<ffi.Void>, UInt64)>>
      UnregisterNotification;

  external ffi.Pointer<
          ffi.NativeFunction<IOReturn Function(ffi.Pointer<ffi.Void>, UInt64)>>
      AcknowledgeNotification;

  external ffi.Pointer<
          ffi.NativeFunction<
              IONotificationPortRef Function(ffi.Pointer<ffi.Void>)>>
      GetDeviceAsyncNotificationPort;
}

typedef HRESULT = SInt32;
typedef SInt32 = ffi.Int;
typedef REFIID = CFUUIDBytes;

class CFUUIDBytes extends ffi.Struct {
  @UInt8()
  external int byte0;

  @UInt8()
  external int byte1;

  @UInt8()
  external int byte2;

  @UInt8()
  external int byte3;

  @UInt8()
  external int byte4;

  @UInt8()
  external int byte5;

  @UInt8()
  external int byte6;

  @UInt8()
  external int byte7;

  @UInt8()
  external int byte8;

  @UInt8()
  external int byte9;

  @UInt8()
  external int byte10;

  @UInt8()
  external int byte11;

  @UInt8()
  external int byte12;

  @UInt8()
  external int byte13;

  @UInt8()
  external int byte14;

  @UInt8()
  external int byte15;
}

typedef UInt8 = ffi.UnsignedChar;
typedef LPVOID = ffi.Pointer<ffi.Void>;
typedef ULONG = UInt32;
typedef UInt32 = ffi.UnsignedInt;
typedef CFRunLoopSourceRef = ffi.Pointer<__CFRunLoopSource>;

class __CFRunLoopSource extends ffi.Opaque {}

typedef mach_port_t = __darwin_mach_port_t;
typedef __darwin_mach_port_t = __darwin_mach_port_name_t;
typedef __darwin_mach_port_name_t = __darwin_natural_t;
typedef __darwin_natural_t = ffi.UnsignedInt;
typedef UInt16 = ffi.UnsignedShort;
typedef USBDeviceAddress = UInt16;
typedef IOUSBConfigurationDescriptorPtr
    = ffi.Pointer<IOUSBConfigurationDescriptor>;

@ffi.Packed(1)
class IOUSBConfigurationDescriptor extends ffi.Struct {
  @ffi.Uint8()
  external int bLength;

  @ffi.Uint8()
  external int bDescriptorType;

  @ffi.Uint16()
  external int wTotalLength;

  @ffi.Uint8()
  external int bNumInterfaces;

  @ffi.Uint8()
  external int bConfigurationValue;

  @ffi.Uint8()
  external int iConfiguration;

  @ffi.Uint8()
  external int bmAttributes;

  @ffi.Uint8()
  external int MaxPower;
}

typedef UInt64 = ffi.UnsignedLongLong;
typedef AbsoluteTime = UnsignedWide;

@ffi.Packed(2)
class UnsignedWide extends ffi.Struct {
  @UInt32()
  external int lo;

  @UInt32()
  external int hi;
}

class IOUSBDevRequest extends ffi.Struct {
  @UInt8()
  external int bmRequestType;

  @UInt8()
  external int bRequest;

  @UInt16()
  external int wValue;

  @UInt16()
  external int wIndex;

  @UInt16()
  external int wLength;

  external ffi.Pointer<ffi.Void> pData;

  @UInt32()
  external int wLenDone;
}

typedef IOAsyncCallback1 = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, IOReturn, ffi.Pointer<ffi.Void>)>>;

class IOUSBFindInterfaceRequest extends ffi.Struct {
  @UInt16()
  external int bInterfaceClass;

  @UInt16()
  external int bInterfaceSubClass;

  @UInt16()
  external int bInterfaceProtocol;

  @UInt16()
  external int bAlternateSetting;
}

typedef io_iterator_t = io_object_t;
typedef io_object_t = mach_port_t;

class IOUSBDevRequestTO extends ffi.Struct {
  @UInt8()
  external int bmRequestType;

  @UInt8()
  external int bRequest;

  @UInt16()
  external int wValue;

  @UInt16()
  external int wIndex;

  @UInt16()
  external int wLength;

  external ffi.Pointer<ffi.Void> pData;

  @UInt32()
  external int wLenDone;

  @UInt32()
  external int noDataTimeout;

  @UInt32()
  external int completionTimeout;
}

typedef Boolean = ffi.UnsignedChar;

class NumVersion extends ffi.Struct {
  @UInt8()
  external int nonRelRev;

  @UInt8()
  external int stage;

  @UInt8()
  external int minorAndBugRev;

  @UInt8()
  external int majorRev;
}

typedef IOAsyncCallback2 = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, IOReturn,
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef IONotificationPortRef = ffi.Pointer<IONotificationPort>;

class IONotificationPort extends ffi.Opaque {}

typedef uint = ffi.UnsignedInt;
typedef ssize_t = __darwin_ssize_t;
typedef __darwin_ssize_t = ffi.Long;
typedef ushort = ffi.UnsignedShort;

class DeathAdder3_5g extends ffi.Struct {
  @ffi.UnsignedChar()
  external int poll;

  @ffi.UnsignedChar()
  external int dpi;

  @ffi.UnsignedChar()
  external int profile;

  @ffi.UnsignedChar()
  external int leds;
}

class razer_mousemat_device extends ffi.Struct {
  external ffi.Pointer<usb_device> usbdev;

  external ffi.Pointer<hid_device> hiddev;

  @ffi.UnsignedChar()
  external int effect;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> name;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> phys;
}

class usb_device extends ffi.Opaque {}

class hid_device extends ffi.Opaque {}

class razer_headphone_device extends ffi.Struct {
  external ffi.Pointer<usb_device> usbdev;

  external ffi.Pointer<hid_device> hiddev;

  @ffi.UnsignedChar()
  external int effect;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> name;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> phys;
}

class razer_kraken_device extends ffi.Struct {
  @ffi.UnsignedChar()
  external int usb_interface_protocol;

  @ffi.UnsignedShort()
  external int usb_pid;

  @ffi.UnsignedShort()
  external int usb_vid;

  @ffi.UnsignedShort()
  external int led_mode_address;

  @ffi.UnsignedShort()
  external int custom_address;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> breathing_address;

  @ffi.Array.multi([23])
  external ffi.Array<ffi.Char> serial;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedChar> firmware_version;

  @ffi.Array.multi([33])
  external ffi.Array<ffi.Char> data;
}

class razer_kraken_effect_byte extends ffi.Opaque {}

class razer_kraken_request_report extends ffi.Struct {
  @ffi.UnsignedChar()
  external int report_id;

  @ffi.UnsignedChar()
  external int destination;

  @ffi.UnsignedChar()
  external int length;

  @ffi.UnsignedChar()
  external int addr_h;

  @ffi.UnsignedChar()
  external int addr_l;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.UnsignedChar> arguments;
}

class razer_kraken_response_report extends ffi.Struct {
  @ffi.UnsignedChar()
  external int report_id;

  @ffi.Array.multi([36])
  external ffi.Array<ffi.UnsignedChar> arguments;
}

class RazerDevice extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<IOUSBDeviceInterface>> usbDevice;

  @UInt16()
  external int productId;

  @ffi.Int()
  external int internalDeviceId;
}

class RazerDevices extends ffi.Struct {
  external ffi.Pointer<RazerDevice> devices;

  @ffi.Int()
  external int size;
}

const int HID_REQ_GET_REPORT = 1;

const int HID_REQ_SET_REPORT = 9;

const int USB_TYPE_CLASS = 32;

const int USB_RECIP_INTERFACE = 1;

const int USB_DIR_OUT = 0;

const int USB_DIR_IN = 128;

const int RAZER_USB_REPORT_LEN = 90;

const int OFF = 0;

const int ON = 1;

const int NOSTORE = 0;

const int VARSTORE = 1;

const int ZERO_LED = 0;

const int SCROLL_WHEEL_LED = 1;

const int BATTERY_LED = 3;

const int LOGO_LED = 4;

const int BACKLIGHT_LED = 5;

const int MACRO_LED = 7;

const int GAME_LED = 8;

const int BASILISK_V3_BASE_LED = 10;

const int RED_PROFILE_LED = 12;

const int GREEN_PROFILE_LED = 13;

const int BLUE_PROFILE_LED = 14;

const int RIGHT_SIDE_LED = 16;

const int LEFT_SIDE_LED = 17;

const int LED_STATIC = 0;

const int LED_BLINKING = 1;

const int LED_PULSATING = 2;

const int LED_SPECTRUM_CYCLING = 4;

const int RAZER_CMD_BUSY = 1;

const int RAZER_CMD_SUCCESSFUL = 2;

const int RAZER_CMD_FAILURE = 3;

const int RAZER_CMD_TIMEOUT = 4;

const int RAZER_CMD_NOT_SUPPORTED = 5;

const int USB_DEVICE_ID_RAZER_BLACKWIDOW_ULTIMATE_2012 = 269;

const int USB_DEVICE_ID_RAZER_BLACKWIDOW_STEALTH_EDITION = 270;

const int USB_DEVICE_ID_RAZER_ANANSI = 271;

const int USB_DEVICE_ID_RAZER_NOSTROMO = 273;

const int USB_DEVICE_ID_RAZER_ORBWEAVER = 275;

const int USB_DEVICE_ID_RAZER_BLACKWIDOW_ULTIMATE_2013 = 282;

const int USB_DEVICE_ID_RAZER_BLACKWIDOW_STEALTH = 283;

const int USB_DEVICE_ID_RAZER_TARTARUS = 513;

const int USB_DEVICE_ID_RAZER_DEATHSTALKER_EXPERT = 514;

const int USB_DEVICE_ID_RAZER_BLACKWIDOW_CHROMA = 515;

const int USB_DEVICE_ID_RAZER_DEATHSTALKER_CHROMA = 516;

const int USB_DEVICE_ID_RAZER_BLADE_STEALTH = 517;

const int USB_DEVICE_ID_RAZER_ORBWEAVER_CHROMA = 519;

const int USB_DEVICE_ID_RAZER_TARTARUS_CHROMA = 520;

const int USB_DEVICE_ID_RAZER_BLACKWIDOW_CHROMA_TE = 521;

const int USB_DEVICE_ID_RAZER_BLADE_QHD = 527;

const int USB_DEVICE_ID_RAZER_BLADE_PRO_LATE_2016 = 528;

const int USB_DEVICE_ID_RAZER_BLACKWIDOW_OVERWATCH = 529;

const int USB_DEVICE_ID_RAZER_BLACKWIDOW_ULTIMATE_2016 = 532;

const int USB_DEVICE_ID_RAZER_BLACKWIDOW_X_CHROMA = 534;

const int USB_DEVICE_ID_RAZER_BLACKWIDOW_X_ULTIMATE = 535;

const int USB_DEVICE_ID_RAZER_BLACKWIDOW_X_CHROMA_TE = 538;

const int USB_DEVICE_ID_RAZER_ORNATA_CHROMA = 542;

const int USB_DEVICE_ID_RAZER_ORNATA = 543;

const int USB_DEVICE_ID_RAZER_ORNATA_CHROMA_V2 = 605;

const int USB_DEVICE_ID_RAZER_BLADE_STEALTH_LATE_2016 = 544;

const int USB_DEVICE_ID_RAZER_BLACKWIDOW_CHROMA_V2 = 545;

const int USB_DEVICE_ID_RAZER_BLACKWIDOW_V3 = 590;

const int USB_DEVICE_ID_RAZER_BLADE_LATE_2016 = 548;

const int USB_DEVICE_ID_RAZER_BLADE_PRO_2017 = 549;

const int USB_DEVICE_ID_RAZER_HUNTSMAN_ELITE = 550;

const int USB_DEVICE_ID_RAZER_HUNTSMAN = 551;

const int USB_DEVICE_ID_RAZER_BLACKWIDOW_ELITE = 552;

const int USB_DEVICE_ID_RAZER_CYNOSA_CHROMA = 554;

const int USB_DEVICE_ID_RAZER_CYNOSA_CHROMA_PRO = 556;

const int USB_DEVICE_ID_RAZER_TARTARUS_V2 = 555;

const int USB_DEVICE_ID_RAZER_BLADE_STEALTH_MID_2017 = 557;

const int USB_DEVICE_ID_RAZER_BLADE_PRO_2017_FULLHD = 559;

const int USB_DEVICE_ID_RAZER_BLADE_STEALTH_LATE_2017 = 562;

const int USB_DEVICE_ID_RAZER_BLADE_2018 = 563;

const int USB_DEVICE_ID_RAZER_BLADE_PRO_2019 = 564;

const int USB_DEVICE_ID_RAZER_BLACKWIDOW_LITE = 565;

const int USB_DEVICE_ID_RAZER_BLACKWIDOW_ESSENTIAL = 567;

const int USB_DEVICE_ID_RAZER_BLADE_STEALTH_2019 = 569;

const int USB_DEVICE_ID_RAZER_BLADE_2019_ADV = 570;

const int USB_DEVICE_ID_RAZER_BLADE_2018_BASE = 571;

const int USB_DEVICE_ID_RAZER_BLADE_2018_MERCURY = 576;

const int USB_DEVICE_ID_RAZER_BLACKWIDOW_2019 = 577;

const int USB_DEVICE_ID_RAZER_HUNTSMAN_TE = 579;

const int USB_DEVICE_ID_RAZER_BLADE_MID_2019_MERCURY = 581;

const int USB_DEVICE_ID_RAZER_BLADE_2019_BASE = 582;

const int USB_DEVICE_ID_RAZER_BLADE_STEALTH_LATE_2019 = 586;

const int USB_DEVICE_ID_RAZER_BLADE_STUDIO_EDITION_2019 = 589;

const int USB_DEVICE_ID_RAZER_CYNOSA_V2 = 606;

const int USB_DEVICE_ID_RAZER_CYNOSA_LITE = 575;

const int USB_DEVICE_ID_RAZER_BLACKWIDOW_V3_TK = 2596;

const int USB_DEVICE_ID_RAZER_HUNTSMAN_MINI = 599;

const int USB_DEVICE_ID_RAZER_BLACKWIDOW_V3_MINI_WIRED = 600;

const int USB_DEVICE_ID_RAZER_BLACKWIDOW_V3_PRO_WIRED = 602;

const int USB_DEVICE_ID_RAZER_HUNTSMAN_V2_ANALOG = 614;

const int USB_DEVICE_ID_RAZER_HUNTSMAN_V2 = 620;

const int USB_DEVICE_ID_RAZER_HUNTSMAN_V2_TKL = 619;

const int USB_DEVICE_ID_RAZER_BLACKWIDOW_V3_MINI_WIRELESS = 625;

const int RAZER_BLACKWIDOW_REPORT_LEN = 90;

const int RAZER_BLACKWIDOW_CHROMA_WAVE_DIRECTION_LEFT = 2;

const int RAZER_BLACKWIDOW_CHROMA_WAVE_DIRECTION_RIGHT = 1;

const int RAZER_BLACKWIDOW_CHROMA_CHANGE_EFFECT = 10;

const int RAZER_BLACKWIDOW_CHROMA_EFFECT_NONE = 0;

const int RAZER_BLACKWIDOW_CHROMA_EFFECT_WAVE = 1;

const int RAZER_BLACKWIDOW_CHROMA_EFFECT_REACTIVE = 2;

const int RAZER_BLACKWIDOW_CHROMA_EFFECT_BREATH = 3;

const int RAZER_BLACKWIDOW_CHROMA_EFFECT_SPECTRUM = 4;

const int RAZER_BLACKWIDOW_CHROMA_EFFECT_CUSTOM = 5;

const int RAZER_BLACKWIDOW_CHROMA_EFFECT_STATIC = 6;

const int RAZER_BLACKWIDOW_CHROMA_EFFECT_CLEAR_ROW = 8;

const int RAZER_BLACKWIDOW_ULTIMATE_2016_EFFECT_STARLIGHT = 25;

const int RAZER_BLACKWIDOW_CHROMA_EFFECT_SET_KEYS = 9;

const int RAZER_BLACKWIDOW_CHROMA_EFFECT_RESET = 10;

const int RAZER_BLACKWIDOW_CHROMA_EFFECT_UNKNOWN = 11;

const int RAZER_BLACKWIDOW_CHROMA_EFFECT_UNKNOWN2 = 12;

const int RAZER_BLACKWIDOW_CHROMA_EFFECT_UNKNOWN3 = 13;

const int RAZER_BLACKWIDOW_CHROMA_EFFECT_UNKNOWN4 = 14;

const int RAZER_BLACKWIDOW_CHROMA_ROW_LEN = 22;

const int RAZER_BLACKWIDOW_CHROMA_ROWS_NUM = 6;

const int RAZER_STEALTH_ROW_LEN = 16;

const int RAZER_STEALTH_ROWS_NUM = 6;

const int RAZER_BLACKWIDOW_CHROMA_WAIT_MS = 1;

const int RAZER_BLACKWIDOW_CHROMA_WAIT_MIN_US = 600;

const int RAZER_BLACKWIDOW_CHROMA_WAIT_MAX_US = 800;

const int RAZER_BLACKWIDOW_V3_WIRELESS_WAIT_MIN_US = 4900;

const int RAZER_BLACKWIDOW_V3_WIRELESS_WAIT_MAX_US = 5000;

const int RAZER_FIREFLY_WAIT_MIN_US = 900;

const int RAZER_FIREFLY_WAIT_MAX_US = 1000;

const int USB_DEVICE_ID_RAZER_OROCHI_2011 = 19;

const int USB_DEVICE_ID_RAZER_DEATHADDER_3_5G = 22;

const int USB_DEVICE_ID_RAZER_ABYSSUS_1800 = 32;

const int USB_DEVICE_ID_RAZER_MAMBA_2012_WIRED = 36;

const int USB_DEVICE_ID_RAZER_MAMBA_2012_WIRELESS = 37;

const int USB_DEVICE_ID_RAZER_NAGA_2012 = 46;

const int USB_DEVICE_ID_RAZER_IMPERATOR = 47;

const int USB_DEVICE_ID_RAZER_OUROBOROS = 50;

const int USB_DEVICE_ID_RAZER_TAIPAN = 52;

const int USB_DEVICE_ID_RAZER_NAGA_HEX_RED = 54;

const int USB_DEVICE_ID_RAZER_DEATHADDER_2013 = 55;

const int USB_DEVICE_ID_RAZER_DEATHADDER_1800 = 56;

const int USB_DEVICE_ID_RAZER_OROCHI_2013 = 57;

const int USB_DEVICE_ID_RAZER_NAGA_2014 = 64;

const int USB_DEVICE_ID_RAZER_NAGA_HEX = 65;

const int USB_DEVICE_ID_RAZER_ABYSSUS = 66;

const int USB_DEVICE_ID_RAZER_DEATHADDER_CHROMA = 67;

const int USB_DEVICE_ID_RAZER_MAMBA_WIRED = 68;

const int USB_DEVICE_ID_RAZER_MAMBA_WIRELESS = 69;

const int USB_DEVICE_ID_RAZER_MAMBA_TE_WIRED = 70;

const int USB_DEVICE_ID_RAZER_OROCHI_CHROMA = 72;

const int USB_DEVICE_ID_RAZER_DIAMONDBACK_CHROMA = 76;

const int USB_DEVICE_ID_RAZER_NAGA_HEX_V2 = 80;

const int USB_DEVICE_ID_RAZER_NAGA_CHROMA = 83;

const int USB_DEVICE_ID_RAZER_DEATHADDER_3500 = 84;

const int USB_DEVICE_ID_RAZER_LANCEHEAD_WIRED = 89;

const int USB_DEVICE_ID_RAZER_LANCEHEAD_WIRELESS = 90;

const int USB_DEVICE_ID_RAZER_ABYSSUS_V2 = 91;

const int USB_DEVICE_ID_RAZER_DEATHADDER_ELITE = 92;

const int USB_DEVICE_ID_RAZER_ABYSSUS_2000 = 94;

const int USB_DEVICE_ID_RAZER_LANCEHEAD_TE_WIRED = 96;

const int USB_DEVICE_ID_RAZER_ATHERIS_RECEIVER = 98;

const int USB_DEVICE_ID_RAZER_BASILISK = 100;

const int USB_DEVICE_ID_RAZER_BASILISK_ESSENTIAL = 101;

const int USB_DEVICE_ID_RAZER_BASILISK_ULTIMATE = 134;

const int USB_DEVICE_ID_RAZER_BASILISK_ULTIMATE_RECEIVER = 136;

const int USB_DEVICE_ID_RAZER_NAGA_TRINITY = 103;

const int USB_DEVICE_ID_RAZER_NAGA_PRO_WIRELESS = 144;

const int USB_DEVICE_ID_RAZER_NAGA_PRO_WIRED = 143;

const int USB_DEVICE_ID_RAZER_ABYSSUS_ELITE_DVA_EDITION = 106;

const int USB_DEVICE_ID_RAZER_ABYSSUS_ESSENTIAL = 107;

const int USB_DEVICE_ID_RAZER_MAMBA_ELITE = 108;

const int USB_DEVICE_ID_RAZER_DEATHADDER_ESSENTIAL = 110;

const int USB_DEVICE_ID_RAZER_LANCEHEAD_WIRELESS_RECEIVER = 111;

const int USB_DEVICE_ID_RAZER_LANCEHEAD_WIRELESS_WIRED = 112;

const int USB_DEVICE_ID_RAZER_DEATHADDER_ESSENTIAL_WHITE_EDITION = 113;

const int USB_DEVICE_ID_RAZER_MAMBA_WIRELESS_RECEIVER = 114;

const int USB_DEVICE_ID_RAZER_MAMBA_WIRELESS_WIRED = 115;

const int USB_DEVICE_ID_RAZER_VIPER = 120;

const int USB_DEVICE_ID_RAZER_VIPER_8KHZ = 145;

const int USB_DEVICE_ID_RAZER_VIPER_ULTIMATE_WIRED = 122;

const int USB_DEVICE_ID_RAZER_VIPER_ULTIMATE_WIRELESS = 123;

const int USB_DEVICE_ID_RAZER_DEATHADDER_V2_PRO_WIRED = 124;

const int USB_DEVICE_ID_RAZER_DEATHADDER_V2_PRO_WIRELESS = 125;

const int USB_DEVICE_ID_RAZER_DEATHADDER_V2 = 132;

const int USB_DEVICE_ID_RAZER_DEATHADDER_V2_MINI = 140;

const int USB_DEVICE_ID_RAZER_VIPER_MINI = 138;

const int USB_DEVICE_ID_RAZER_BASILISK_V2 = 133;

const int USB_DEVICE_ID_RAZER_NAGA_LEFT_HANDED_2020 = 141;

const int USB_DEVICE_ID_RAZER_DEATHADDER_ESSENTIAL_2021 = 152;

const int USB_DEVICE_ID_RAZER_BASILISK_V3 = 153;

const int USB_DEVICE_ID_RAZER_OROCHI_V2_RECEIVER = 148;

const int USB_DEVICE_ID_RAZER_OROCHI_V2 = 149;

const int USB_DEVICE_ID_RAZER_OROCHI_V2_BLUETOOTH = 149;

const int RAZER_REPORT_LEN = 90;

const int RAZER_MAMBA_ROW_LEN = 15;

const int RAZER_MAMBA_TE_ROW_LEN = 16;

const int RAZER_DIAMONDBACK_ROW_LEN = 21;

const int RAZER_MOUSE_WAIT_MIN_US = 600;

const int RAZER_MOUSE_WAIT_MAX_US = 800;

const int RAZER_NEW_MOUSE_RECEIVER_WAIT_MIN_US = 31000;

const int RAZER_NEW_MOUSE_RECEIVER_WAIT_MAX_US = 31100;

const int RAZER_ATHERIS_RECEIVER_WAIT_MIN_US = 400000;

const int RAZER_ATHERIS_RECEIVER_WAIT_MAX_US = 400100;

const int RAZER_VIPER_MOUSE_RECEIVER_WAIT_MIN_US = 59900;

const int RAZER_VIPER_MOUSE_RECEIVER_WAIT_MAX_US = 60000;

const int USB_DEVICE_ID_RAZER_MOUSE_CHARGING_DOCK = 126;

const int RAZER_MOUSE_DOCK_WAIT_MIN_US = 600;

const int RAZER_MOUSE_DOCK_WAIT_MAX_US = 800;

const int USB_DEVICE_ID_RAZER_FIREFLY_HYPERFLUX = 104;

const int USB_DEVICE_ID_RAZER_FIREFLY = 3072;

const int USB_DEVICE_ID_RAZER_FIREFLY_V2 = 3076;

const int USB_DEVICE_ID_RAZER_GOLIATHUS_CHROMA = 3073;

const int USB_DEVICE_ID_RAZER_GOLIATHUS_CHROMA_EXTENDED = 3074;

const int RAZER_MOUSEMAT_WAIT_MIN_US = 900;

const int RAZER_MOUSEMAT_WAIT_MAX_US = 1000;

const int USB_DEVICE_ID_RAZER_KRAKEN_KITTY_EDITION = 3865;

const int RAZER_HEADPHONE_WAIT_MIN_US = 600;

const int RAZER_HEADPHONE_WAIT_MAX_US = 1000;

const int USB_DEVICE_ID_RAZER_CORE_X_CHROMA = 3866;

const int RAZER_EGPU_WAIT_MIN_US = 900;

const int RAZER_EGPU_WAIT_MAX_US = 1000;

const int USB_DEVICE_ID_RAZER_KRAKEN_CLASSIC = 1281;

const int USB_DEVICE_ID_RAZER_KRAKEN = 1284;

const int USB_DEVICE_ID_RAZER_KRAKEN_CLASSIC_ALT = 1286;

const int USB_DEVICE_ID_RAZER_KRAKEN_V2 = 1296;

const int USB_DEVICE_ID_RAZER_KRAKEN_ULTIMATE = 1319;

const int USB_INTERFACE_PROTOCOL_NONE = 0;

const int KYLIE_SET_LED_ADDRESS = 5933;

const int RAINIE_SET_LED_ADDRESS = 4104;

const int KYLIE_CUSTOM_ADDRESS_START = 4489;

const int RAINIE_CUSTOM_ADDRESS_START = 4489;

const int KYLIE_BREATHING1_ADDRESS_START = 5953;

const int RAINIE_BREATHING1_ADDRESS_START = 5598;

const int KYLIE_BREATHING2_ADDRESS_START = 5957;

const int KYLIE_BREATHING3_ADDRESS_START = 5965;

const int USB_DEVICE_ID_RAZER_MOUSE_DOCK = 126;

const int USB_DEVICE_ID_RAZER_NOMMO_CHROMA = 1303;

const int USB_DEVICE_ID_RAZER_NOMMO_PRO = 1304;

const int USB_DEVICE_ID_RAZER_CHROMA_MUG = 3847;

const int USB_DEVICE_ID_RAZER_CHROMA_BASE = 3848;

const int USB_DEVICE_ID_RAZER_CHROMA_HDK = 3849;

const int USB_DEVICE_ID_RAZER_MOUSE_BUNGEE_V3_CHROMA = 3869;

const int USB_DEVICE_ID_RAZER_BASE_STATION_V2_CHROMA = 3872;

const int USB_DEVICE_ID_RAZER_THUNDERBOLT_4_DOCK_CHROMA = 3873;

const int RAZER_ACCESSORY_WAIT_MIN_US = 600;

const int RAZER_ACCESSORY_WAIT_MAX_US = 1000;

const int RAZER_NEW_DEVICE_WAIT_MIN_US = 31000;

const int RAZER_NEW_DEVICE_WAIT_MAX_US = 31100;

const int TYPE_KEYBOARD = 0;

const int TYPE_BLADE = 1;

const int TYPE_MOUSE = 2;

const int TYPE_MOUSE_DOCK = 3;

const int TYPE_MOUSE_MAT = 4;

const int TYPE_EGPU = 5;

const int TYPE_HEADPHONE = 6;

const int TYPE_ACCESSORY = 7;

const int USB_VENDOR_ID_RAZER = 5426;
